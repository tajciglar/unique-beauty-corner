
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model Termin
 * 
 */
export type Termin = $Result.DefaultSelection<Prisma.$TerminPayload>
/**
 * Model Naročila
 * 
 */
export type Naročila = $Result.DefaultSelection<Prisma.$NaročilaPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Admins
 * const admins = await prisma.admin.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Admins
   * const admins = await prisma.admin.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.termin`: Exposes CRUD operations for the **Termin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Termins
    * const termins = await prisma.termin.findMany()
    * ```
    */
  get termin(): Prisma.TerminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.naročila`: Exposes CRUD operations for the **Naročila** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Naročilas
    * const naročilas = await prisma.naročila.findMany()
    * ```
    */
  get naročila(): Prisma.NaročilaDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.3.0
   * Query Engine version: acc0b9dd43eb689cbd20c9470515d719db10d0b0
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Admin: 'Admin',
    Termin: 'Termin',
    Naročila: 'Naročila'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "admin" | "termin" | "naročila"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      Termin: {
        payload: Prisma.$TerminPayload<ExtArgs>
        fields: Prisma.TerminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TerminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TerminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerminPayload>
          }
          findFirst: {
            args: Prisma.TerminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TerminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerminPayload>
          }
          findMany: {
            args: Prisma.TerminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerminPayload>[]
          }
          create: {
            args: Prisma.TerminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerminPayload>
          }
          createMany: {
            args: Prisma.TerminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TerminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerminPayload>[]
          }
          delete: {
            args: Prisma.TerminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerminPayload>
          }
          update: {
            args: Prisma.TerminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerminPayload>
          }
          deleteMany: {
            args: Prisma.TerminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TerminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TerminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerminPayload>[]
          }
          upsert: {
            args: Prisma.TerminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TerminPayload>
          }
          aggregate: {
            args: Prisma.TerminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTermin>
          }
          groupBy: {
            args: Prisma.TerminGroupByArgs<ExtArgs>
            result: $Utils.Optional<TerminGroupByOutputType>[]
          }
          count: {
            args: Prisma.TerminCountArgs<ExtArgs>
            result: $Utils.Optional<TerminCountAggregateOutputType> | number
          }
        }
      }
      Naročila: {
        payload: Prisma.$NaročilaPayload<ExtArgs>
        fields: Prisma.NaročilaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NaročilaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NaročilaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NaročilaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NaročilaPayload>
          }
          findFirst: {
            args: Prisma.NaročilaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NaročilaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NaročilaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NaročilaPayload>
          }
          findMany: {
            args: Prisma.NaročilaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NaročilaPayload>[]
          }
          create: {
            args: Prisma.NaročilaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NaročilaPayload>
          }
          createMany: {
            args: Prisma.NaročilaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NaročilaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NaročilaPayload>[]
          }
          delete: {
            args: Prisma.NaročilaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NaročilaPayload>
          }
          update: {
            args: Prisma.NaročilaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NaročilaPayload>
          }
          deleteMany: {
            args: Prisma.NaročilaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NaročilaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NaročilaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NaročilaPayload>[]
          }
          upsert: {
            args: Prisma.NaročilaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NaročilaPayload>
          }
          aggregate: {
            args: Prisma.NaročilaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNaročila>
          }
          groupBy: {
            args: Prisma.NaročilaGroupByArgs<ExtArgs>
            result: $Utils.Optional<NaročilaGroupByOutputType>[]
          }
          count: {
            args: Prisma.NaročilaCountArgs<ExtArgs>
            result: $Utils.Optional<NaročilaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    admin?: AdminOmit
    termin?: TerminOmit
    naročila?: NaročilaOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TerminCountOutputType
   */

  export type TerminCountOutputType = {
    Naročila: number
  }

  export type TerminCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Naročila?: boolean | TerminCountOutputTypeCountNaročilaArgs
  }

  // Custom InputTypes
  /**
   * TerminCountOutputType without action
   */
  export type TerminCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TerminCountOutputType
     */
    select?: TerminCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TerminCountOutputType without action
   */
  export type TerminCountOutputTypeCountNaročilaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NaročilaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    id: number | null
  }

  export type AdminSumAggregateOutputType = {
    id: number | null
  }

  export type AdminMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
  }

  export type AdminMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    username: number
    password: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    id?: true
  }

  export type AdminSumAggregateInputType = {
    id?: true
  }

  export type AdminMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: number
    username: string
    password: string
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
  }

  export type AdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password", ExtArgs["result"]["admin"]>

  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      password: string
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Admins and returns the data saved in the database.
     * @param {AdminCreateManyAndReturnArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins and returns the data updated in the database.
     * @param {AdminUpdateManyAndReturnArgs} args - Arguments to update many Admins.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */ 
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'Int'>
    readonly username: FieldRef<"Admin", 'String'>
    readonly password: FieldRef<"Admin", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin createManyAndReturn
   */
  export type AdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin updateManyAndReturn
   */
  export type AdminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to delete.
     */
    limit?: number
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
  }


  /**
   * Model Termin
   */

  export type AggregateTermin = {
    _count: TerminCountAggregateOutputType | null
    _avg: TerminAvgAggregateOutputType | null
    _sum: TerminSumAggregateOutputType | null
    _min: TerminMinAggregateOutputType | null
    _max: TerminMaxAggregateOutputType | null
  }

  export type TerminAvgAggregateOutputType = {
    terminId: number | null
  }

  export type TerminSumAggregateOutputType = {
    terminId: number | null
  }

  export type TerminMinAggregateOutputType = {
    terminId: number | null
    date: Date | null
    startTime: string | null
    endTime: string | null
    naVoljo: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TerminMaxAggregateOutputType = {
    terminId: number | null
    date: Date | null
    startTime: string | null
    endTime: string | null
    naVoljo: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TerminCountAggregateOutputType = {
    terminId: number
    date: number
    startTime: number
    endTime: number
    naVoljo: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TerminAvgAggregateInputType = {
    terminId?: true
  }

  export type TerminSumAggregateInputType = {
    terminId?: true
  }

  export type TerminMinAggregateInputType = {
    terminId?: true
    date?: true
    startTime?: true
    endTime?: true
    naVoljo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TerminMaxAggregateInputType = {
    terminId?: true
    date?: true
    startTime?: true
    endTime?: true
    naVoljo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TerminCountAggregateInputType = {
    terminId?: true
    date?: true
    startTime?: true
    endTime?: true
    naVoljo?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TerminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Termin to aggregate.
     */
    where?: TerminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Termins to fetch.
     */
    orderBy?: TerminOrderByWithRelationInput | TerminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TerminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Termins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Termins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Termins
    **/
    _count?: true | TerminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TerminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TerminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TerminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TerminMaxAggregateInputType
  }

  export type GetTerminAggregateType<T extends TerminAggregateArgs> = {
        [P in keyof T & keyof AggregateTermin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTermin[P]>
      : GetScalarType<T[P], AggregateTermin[P]>
  }




  export type TerminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TerminWhereInput
    orderBy?: TerminOrderByWithAggregationInput | TerminOrderByWithAggregationInput[]
    by: TerminScalarFieldEnum[] | TerminScalarFieldEnum
    having?: TerminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TerminCountAggregateInputType | true
    _avg?: TerminAvgAggregateInputType
    _sum?: TerminSumAggregateInputType
    _min?: TerminMinAggregateInputType
    _max?: TerminMaxAggregateInputType
  }

  export type TerminGroupByOutputType = {
    terminId: number
    date: Date
    startTime: string
    endTime: string
    naVoljo: boolean
    createdAt: Date
    updatedAt: Date
    _count: TerminCountAggregateOutputType | null
    _avg: TerminAvgAggregateOutputType | null
    _sum: TerminSumAggregateOutputType | null
    _min: TerminMinAggregateOutputType | null
    _max: TerminMaxAggregateOutputType | null
  }

  type GetTerminGroupByPayload<T extends TerminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TerminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TerminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TerminGroupByOutputType[P]>
            : GetScalarType<T[P], TerminGroupByOutputType[P]>
        }
      >
    >


  export type TerminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    terminId?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    naVoljo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Naročila?: boolean | Termin$NaročilaArgs<ExtArgs>
    _count?: boolean | TerminCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["termin"]>

  export type TerminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    terminId?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    naVoljo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["termin"]>

  export type TerminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    terminId?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    naVoljo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["termin"]>

  export type TerminSelectScalar = {
    terminId?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    naVoljo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TerminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"terminId" | "date" | "startTime" | "endTime" | "naVoljo" | "createdAt" | "updatedAt", ExtArgs["result"]["termin"]>
  export type TerminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Naročila?: boolean | Termin$NaročilaArgs<ExtArgs>
    _count?: boolean | TerminCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TerminIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TerminIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TerminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Termin"
    objects: {
      Naročila: Prisma.$NaročilaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      terminId: number
      date: Date
      startTime: string
      endTime: string
      naVoljo: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["termin"]>
    composites: {}
  }

  type TerminGetPayload<S extends boolean | null | undefined | TerminDefaultArgs> = $Result.GetResult<Prisma.$TerminPayload, S>

  type TerminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TerminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TerminCountAggregateInputType | true
    }

  export interface TerminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Termin'], meta: { name: 'Termin' } }
    /**
     * Find zero or one Termin that matches the filter.
     * @param {TerminFindUniqueArgs} args - Arguments to find a Termin
     * @example
     * // Get one Termin
     * const termin = await prisma.termin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TerminFindUniqueArgs>(args: SelectSubset<T, TerminFindUniqueArgs<ExtArgs>>): Prisma__TerminClient<$Result.GetResult<Prisma.$TerminPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Termin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TerminFindUniqueOrThrowArgs} args - Arguments to find a Termin
     * @example
     * // Get one Termin
     * const termin = await prisma.termin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TerminFindUniqueOrThrowArgs>(args: SelectSubset<T, TerminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TerminClient<$Result.GetResult<Prisma.$TerminPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Termin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerminFindFirstArgs} args - Arguments to find a Termin
     * @example
     * // Get one Termin
     * const termin = await prisma.termin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TerminFindFirstArgs>(args?: SelectSubset<T, TerminFindFirstArgs<ExtArgs>>): Prisma__TerminClient<$Result.GetResult<Prisma.$TerminPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Termin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerminFindFirstOrThrowArgs} args - Arguments to find a Termin
     * @example
     * // Get one Termin
     * const termin = await prisma.termin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TerminFindFirstOrThrowArgs>(args?: SelectSubset<T, TerminFindFirstOrThrowArgs<ExtArgs>>): Prisma__TerminClient<$Result.GetResult<Prisma.$TerminPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Termins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Termins
     * const termins = await prisma.termin.findMany()
     * 
     * // Get first 10 Termins
     * const termins = await prisma.termin.findMany({ take: 10 })
     * 
     * // Only select the `terminId`
     * const terminWithTerminIdOnly = await prisma.termin.findMany({ select: { terminId: true } })
     * 
     */
    findMany<T extends TerminFindManyArgs>(args?: SelectSubset<T, TerminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TerminPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Termin.
     * @param {TerminCreateArgs} args - Arguments to create a Termin.
     * @example
     * // Create one Termin
     * const Termin = await prisma.termin.create({
     *   data: {
     *     // ... data to create a Termin
     *   }
     * })
     * 
     */
    create<T extends TerminCreateArgs>(args: SelectSubset<T, TerminCreateArgs<ExtArgs>>): Prisma__TerminClient<$Result.GetResult<Prisma.$TerminPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Termins.
     * @param {TerminCreateManyArgs} args - Arguments to create many Termins.
     * @example
     * // Create many Termins
     * const termin = await prisma.termin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TerminCreateManyArgs>(args?: SelectSubset<T, TerminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Termins and returns the data saved in the database.
     * @param {TerminCreateManyAndReturnArgs} args - Arguments to create many Termins.
     * @example
     * // Create many Termins
     * const termin = await prisma.termin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Termins and only return the `terminId`
     * const terminWithTerminIdOnly = await prisma.termin.createManyAndReturn({
     *   select: { terminId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TerminCreateManyAndReturnArgs>(args?: SelectSubset<T, TerminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TerminPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Termin.
     * @param {TerminDeleteArgs} args - Arguments to delete one Termin.
     * @example
     * // Delete one Termin
     * const Termin = await prisma.termin.delete({
     *   where: {
     *     // ... filter to delete one Termin
     *   }
     * })
     * 
     */
    delete<T extends TerminDeleteArgs>(args: SelectSubset<T, TerminDeleteArgs<ExtArgs>>): Prisma__TerminClient<$Result.GetResult<Prisma.$TerminPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Termin.
     * @param {TerminUpdateArgs} args - Arguments to update one Termin.
     * @example
     * // Update one Termin
     * const termin = await prisma.termin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TerminUpdateArgs>(args: SelectSubset<T, TerminUpdateArgs<ExtArgs>>): Prisma__TerminClient<$Result.GetResult<Prisma.$TerminPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Termins.
     * @param {TerminDeleteManyArgs} args - Arguments to filter Termins to delete.
     * @example
     * // Delete a few Termins
     * const { count } = await prisma.termin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TerminDeleteManyArgs>(args?: SelectSubset<T, TerminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Termins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Termins
     * const termin = await prisma.termin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TerminUpdateManyArgs>(args: SelectSubset<T, TerminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Termins and returns the data updated in the database.
     * @param {TerminUpdateManyAndReturnArgs} args - Arguments to update many Termins.
     * @example
     * // Update many Termins
     * const termin = await prisma.termin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Termins and only return the `terminId`
     * const terminWithTerminIdOnly = await prisma.termin.updateManyAndReturn({
     *   select: { terminId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TerminUpdateManyAndReturnArgs>(args: SelectSubset<T, TerminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TerminPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Termin.
     * @param {TerminUpsertArgs} args - Arguments to update or create a Termin.
     * @example
     * // Update or create a Termin
     * const termin = await prisma.termin.upsert({
     *   create: {
     *     // ... data to create a Termin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Termin we want to update
     *   }
     * })
     */
    upsert<T extends TerminUpsertArgs>(args: SelectSubset<T, TerminUpsertArgs<ExtArgs>>): Prisma__TerminClient<$Result.GetResult<Prisma.$TerminPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Termins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerminCountArgs} args - Arguments to filter Termins to count.
     * @example
     * // Count the number of Termins
     * const count = await prisma.termin.count({
     *   where: {
     *     // ... the filter for the Termins we want to count
     *   }
     * })
    **/
    count<T extends TerminCountArgs>(
      args?: Subset<T, TerminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TerminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Termin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TerminAggregateArgs>(args: Subset<T, TerminAggregateArgs>): Prisma.PrismaPromise<GetTerminAggregateType<T>>

    /**
     * Group by Termin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TerminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TerminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TerminGroupByArgs['orderBy'] }
        : { orderBy?: TerminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TerminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTerminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Termin model
   */
  readonly fields: TerminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Termin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TerminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Naročila<T extends Termin$NaročilaArgs<ExtArgs> = {}>(args?: Subset<T, Termin$NaročilaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NaročilaPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Termin model
   */ 
  interface TerminFieldRefs {
    readonly terminId: FieldRef<"Termin", 'Int'>
    readonly date: FieldRef<"Termin", 'DateTime'>
    readonly startTime: FieldRef<"Termin", 'String'>
    readonly endTime: FieldRef<"Termin", 'String'>
    readonly naVoljo: FieldRef<"Termin", 'Boolean'>
    readonly createdAt: FieldRef<"Termin", 'DateTime'>
    readonly updatedAt: FieldRef<"Termin", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Termin findUnique
   */
  export type TerminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Termin
     */
    select?: TerminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Termin
     */
    omit?: TerminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerminInclude<ExtArgs> | null
    /**
     * Filter, which Termin to fetch.
     */
    where: TerminWhereUniqueInput
  }

  /**
   * Termin findUniqueOrThrow
   */
  export type TerminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Termin
     */
    select?: TerminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Termin
     */
    omit?: TerminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerminInclude<ExtArgs> | null
    /**
     * Filter, which Termin to fetch.
     */
    where: TerminWhereUniqueInput
  }

  /**
   * Termin findFirst
   */
  export type TerminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Termin
     */
    select?: TerminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Termin
     */
    omit?: TerminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerminInclude<ExtArgs> | null
    /**
     * Filter, which Termin to fetch.
     */
    where?: TerminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Termins to fetch.
     */
    orderBy?: TerminOrderByWithRelationInput | TerminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Termins.
     */
    cursor?: TerminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Termins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Termins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Termins.
     */
    distinct?: TerminScalarFieldEnum | TerminScalarFieldEnum[]
  }

  /**
   * Termin findFirstOrThrow
   */
  export type TerminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Termin
     */
    select?: TerminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Termin
     */
    omit?: TerminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerminInclude<ExtArgs> | null
    /**
     * Filter, which Termin to fetch.
     */
    where?: TerminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Termins to fetch.
     */
    orderBy?: TerminOrderByWithRelationInput | TerminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Termins.
     */
    cursor?: TerminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Termins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Termins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Termins.
     */
    distinct?: TerminScalarFieldEnum | TerminScalarFieldEnum[]
  }

  /**
   * Termin findMany
   */
  export type TerminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Termin
     */
    select?: TerminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Termin
     */
    omit?: TerminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerminInclude<ExtArgs> | null
    /**
     * Filter, which Termins to fetch.
     */
    where?: TerminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Termins to fetch.
     */
    orderBy?: TerminOrderByWithRelationInput | TerminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Termins.
     */
    cursor?: TerminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Termins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Termins.
     */
    skip?: number
    distinct?: TerminScalarFieldEnum | TerminScalarFieldEnum[]
  }

  /**
   * Termin create
   */
  export type TerminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Termin
     */
    select?: TerminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Termin
     */
    omit?: TerminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerminInclude<ExtArgs> | null
    /**
     * The data needed to create a Termin.
     */
    data: XOR<TerminCreateInput, TerminUncheckedCreateInput>
  }

  /**
   * Termin createMany
   */
  export type TerminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Termins.
     */
    data: TerminCreateManyInput | TerminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Termin createManyAndReturn
   */
  export type TerminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Termin
     */
    select?: TerminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Termin
     */
    omit?: TerminOmit<ExtArgs> | null
    /**
     * The data used to create many Termins.
     */
    data: TerminCreateManyInput | TerminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Termin update
   */
  export type TerminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Termin
     */
    select?: TerminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Termin
     */
    omit?: TerminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerminInclude<ExtArgs> | null
    /**
     * The data needed to update a Termin.
     */
    data: XOR<TerminUpdateInput, TerminUncheckedUpdateInput>
    /**
     * Choose, which Termin to update.
     */
    where: TerminWhereUniqueInput
  }

  /**
   * Termin updateMany
   */
  export type TerminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Termins.
     */
    data: XOR<TerminUpdateManyMutationInput, TerminUncheckedUpdateManyInput>
    /**
     * Filter which Termins to update
     */
    where?: TerminWhereInput
    /**
     * Limit how many Termins to update.
     */
    limit?: number
  }

  /**
   * Termin updateManyAndReturn
   */
  export type TerminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Termin
     */
    select?: TerminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Termin
     */
    omit?: TerminOmit<ExtArgs> | null
    /**
     * The data used to update Termins.
     */
    data: XOR<TerminUpdateManyMutationInput, TerminUncheckedUpdateManyInput>
    /**
     * Filter which Termins to update
     */
    where?: TerminWhereInput
    /**
     * Limit how many Termins to update.
     */
    limit?: number
  }

  /**
   * Termin upsert
   */
  export type TerminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Termin
     */
    select?: TerminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Termin
     */
    omit?: TerminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerminInclude<ExtArgs> | null
    /**
     * The filter to search for the Termin to update in case it exists.
     */
    where: TerminWhereUniqueInput
    /**
     * In case the Termin found by the `where` argument doesn't exist, create a new Termin with this data.
     */
    create: XOR<TerminCreateInput, TerminUncheckedCreateInput>
    /**
     * In case the Termin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TerminUpdateInput, TerminUncheckedUpdateInput>
  }

  /**
   * Termin delete
   */
  export type TerminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Termin
     */
    select?: TerminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Termin
     */
    omit?: TerminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerminInclude<ExtArgs> | null
    /**
     * Filter which Termin to delete.
     */
    where: TerminWhereUniqueInput
  }

  /**
   * Termin deleteMany
   */
  export type TerminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Termins to delete
     */
    where?: TerminWhereInput
    /**
     * Limit how many Termins to delete.
     */
    limit?: number
  }

  /**
   * Termin.Naročila
   */
  export type Termin$NaročilaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Naročila
     */
    select?: NaročilaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Naročila
     */
    omit?: NaročilaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NaročilaInclude<ExtArgs> | null
    where?: NaročilaWhereInput
    orderBy?: NaročilaOrderByWithRelationInput | NaročilaOrderByWithRelationInput[]
    cursor?: NaročilaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NaročilaScalarFieldEnum | NaročilaScalarFieldEnum[]
  }

  /**
   * Termin without action
   */
  export type TerminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Termin
     */
    select?: TerminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Termin
     */
    omit?: TerminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TerminInclude<ExtArgs> | null
  }


  /**
   * Model Naročila
   */

  export type AggregateNaročila = {
    _count: NaročilaCountAggregateOutputType | null
    _avg: NaročilaAvgAggregateOutputType | null
    _sum: NaročilaSumAggregateOutputType | null
    _min: NaročilaMinAggregateOutputType | null
    _max: NaročilaMaxAggregateOutputType | null
  }

  export type NaročilaAvgAggregateOutputType = {
    naročiloId: number | null
    cena: number | null
    terminId: number | null
  }

  export type NaročilaSumAggregateOutputType = {
    naročiloId: number | null
    cena: number | null
    terminId: number | null
  }

  export type NaročilaMinAggregateOutputType = {
    naročiloId: number | null
    ime: string | null
    email: string | null
    telefon: string | null
    cena: number | null
    terminId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NaročilaMaxAggregateOutputType = {
    naročiloId: number | null
    ime: string | null
    email: string | null
    telefon: string | null
    cena: number | null
    terminId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NaročilaCountAggregateOutputType = {
    naročiloId: number
    ime: number
    email: number
    telefon: number
    storitve: number
    cena: number
    terminId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NaročilaAvgAggregateInputType = {
    naročiloId?: true
    cena?: true
    terminId?: true
  }

  export type NaročilaSumAggregateInputType = {
    naročiloId?: true
    cena?: true
    terminId?: true
  }

  export type NaročilaMinAggregateInputType = {
    naročiloId?: true
    ime?: true
    email?: true
    telefon?: true
    cena?: true
    terminId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NaročilaMaxAggregateInputType = {
    naročiloId?: true
    ime?: true
    email?: true
    telefon?: true
    cena?: true
    terminId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NaročilaCountAggregateInputType = {
    naročiloId?: true
    ime?: true
    email?: true
    telefon?: true
    storitve?: true
    cena?: true
    terminId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NaročilaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Naročila to aggregate.
     */
    where?: NaročilaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Naročilas to fetch.
     */
    orderBy?: NaročilaOrderByWithRelationInput | NaročilaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NaročilaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Naročilas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Naročilas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Naročilas
    **/
    _count?: true | NaročilaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NaročilaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NaročilaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NaročilaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NaročilaMaxAggregateInputType
  }

  export type GetNaročilaAggregateType<T extends NaročilaAggregateArgs> = {
        [P in keyof T & keyof AggregateNaročila]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNaročila[P]>
      : GetScalarType<T[P], AggregateNaročila[P]>
  }




  export type NaročilaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NaročilaWhereInput
    orderBy?: NaročilaOrderByWithAggregationInput | NaročilaOrderByWithAggregationInput[]
    by: NaročilaScalarFieldEnum[] | NaročilaScalarFieldEnum
    having?: NaročilaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NaročilaCountAggregateInputType | true
    _avg?: NaročilaAvgAggregateInputType
    _sum?: NaročilaSumAggregateInputType
    _min?: NaročilaMinAggregateInputType
    _max?: NaročilaMaxAggregateInputType
  }

  export type NaročilaGroupByOutputType = {
    naročiloId: number
    ime: string
    email: string
    telefon: string
    storitve: string[]
    cena: number
    terminId: number
    createdAt: Date
    updatedAt: Date
    _count: NaročilaCountAggregateOutputType | null
    _avg: NaročilaAvgAggregateOutputType | null
    _sum: NaročilaSumAggregateOutputType | null
    _min: NaročilaMinAggregateOutputType | null
    _max: NaročilaMaxAggregateOutputType | null
  }

  type GetNaročilaGroupByPayload<T extends NaročilaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NaročilaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NaročilaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NaročilaGroupByOutputType[P]>
            : GetScalarType<T[P], NaročilaGroupByOutputType[P]>
        }
      >
    >


  export type NaročilaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    naročiloId?: boolean
    ime?: boolean
    email?: boolean
    telefon?: boolean
    storitve?: boolean
    cena?: boolean
    terminId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    termin?: boolean | TerminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["naročila"]>

  export type NaročilaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    naročiloId?: boolean
    ime?: boolean
    email?: boolean
    telefon?: boolean
    storitve?: boolean
    cena?: boolean
    terminId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    termin?: boolean | TerminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["naročila"]>

  export type NaročilaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    naročiloId?: boolean
    ime?: boolean
    email?: boolean
    telefon?: boolean
    storitve?: boolean
    cena?: boolean
    terminId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    termin?: boolean | TerminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["naročila"]>

  export type NaročilaSelectScalar = {
    naročiloId?: boolean
    ime?: boolean
    email?: boolean
    telefon?: boolean
    storitve?: boolean
    cena?: boolean
    terminId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NaročilaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"naročiloId" | "ime" | "email" | "telefon" | "storitve" | "cena" | "terminId" | "createdAt" | "updatedAt", ExtArgs["result"]["naročila"]>
  export type NaročilaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    termin?: boolean | TerminDefaultArgs<ExtArgs>
  }
  export type NaročilaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    termin?: boolean | TerminDefaultArgs<ExtArgs>
  }
  export type NaročilaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    termin?: boolean | TerminDefaultArgs<ExtArgs>
  }

  export type $NaročilaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Naročila"
    objects: {
      termin: Prisma.$TerminPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      naročiloId: number
      ime: string
      email: string
      telefon: string
      storitve: string[]
      cena: number
      terminId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["naročila"]>
    composites: {}
  }

  type NaročilaGetPayload<S extends boolean | null | undefined | NaročilaDefaultArgs> = $Result.GetResult<Prisma.$NaročilaPayload, S>

  type NaročilaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NaročilaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NaročilaCountAggregateInputType | true
    }

  export interface NaročilaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Naročila'], meta: { name: 'Naročila' } }
    /**
     * Find zero or one Naročila that matches the filter.
     * @param {NaročilaFindUniqueArgs} args - Arguments to find a Naročila
     * @example
     * // Get one Naročila
     * const naročila = await prisma.naročila.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NaročilaFindUniqueArgs>(args: SelectSubset<T, NaročilaFindUniqueArgs<ExtArgs>>): Prisma__NaročilaClient<$Result.GetResult<Prisma.$NaročilaPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Naročila that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NaročilaFindUniqueOrThrowArgs} args - Arguments to find a Naročila
     * @example
     * // Get one Naročila
     * const naročila = await prisma.naročila.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NaročilaFindUniqueOrThrowArgs>(args: SelectSubset<T, NaročilaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NaročilaClient<$Result.GetResult<Prisma.$NaročilaPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Naročila that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NaročilaFindFirstArgs} args - Arguments to find a Naročila
     * @example
     * // Get one Naročila
     * const naročila = await prisma.naročila.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NaročilaFindFirstArgs>(args?: SelectSubset<T, NaročilaFindFirstArgs<ExtArgs>>): Prisma__NaročilaClient<$Result.GetResult<Prisma.$NaročilaPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Naročila that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NaročilaFindFirstOrThrowArgs} args - Arguments to find a Naročila
     * @example
     * // Get one Naročila
     * const naročila = await prisma.naročila.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NaročilaFindFirstOrThrowArgs>(args?: SelectSubset<T, NaročilaFindFirstOrThrowArgs<ExtArgs>>): Prisma__NaročilaClient<$Result.GetResult<Prisma.$NaročilaPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Naročilas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NaročilaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Naročilas
     * const naročilas = await prisma.naročila.findMany()
     * 
     * // Get first 10 Naročilas
     * const naročilas = await prisma.naročila.findMany({ take: 10 })
     * 
     * // Only select the `naročiloId`
     * const naročilaWithNaročiloIdOnly = await prisma.naročila.findMany({ select: { naročiloId: true } })
     * 
     */
    findMany<T extends NaročilaFindManyArgs>(args?: SelectSubset<T, NaročilaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NaročilaPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Naročila.
     * @param {NaročilaCreateArgs} args - Arguments to create a Naročila.
     * @example
     * // Create one Naročila
     * const Naročila = await prisma.naročila.create({
     *   data: {
     *     // ... data to create a Naročila
     *   }
     * })
     * 
     */
    create<T extends NaročilaCreateArgs>(args: SelectSubset<T, NaročilaCreateArgs<ExtArgs>>): Prisma__NaročilaClient<$Result.GetResult<Prisma.$NaročilaPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Naročilas.
     * @param {NaročilaCreateManyArgs} args - Arguments to create many Naročilas.
     * @example
     * // Create many Naročilas
     * const naročila = await prisma.naročila.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NaročilaCreateManyArgs>(args?: SelectSubset<T, NaročilaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Naročilas and returns the data saved in the database.
     * @param {NaročilaCreateManyAndReturnArgs} args - Arguments to create many Naročilas.
     * @example
     * // Create many Naročilas
     * const naročila = await prisma.naročila.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Naročilas and only return the `naročiloId`
     * const naročilaWithNaročiloIdOnly = await prisma.naročila.createManyAndReturn({
     *   select: { naročiloId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NaročilaCreateManyAndReturnArgs>(args?: SelectSubset<T, NaročilaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NaročilaPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Naročila.
     * @param {NaročilaDeleteArgs} args - Arguments to delete one Naročila.
     * @example
     * // Delete one Naročila
     * const Naročila = await prisma.naročila.delete({
     *   where: {
     *     // ... filter to delete one Naročila
     *   }
     * })
     * 
     */
    delete<T extends NaročilaDeleteArgs>(args: SelectSubset<T, NaročilaDeleteArgs<ExtArgs>>): Prisma__NaročilaClient<$Result.GetResult<Prisma.$NaročilaPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Naročila.
     * @param {NaročilaUpdateArgs} args - Arguments to update one Naročila.
     * @example
     * // Update one Naročila
     * const naročila = await prisma.naročila.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NaročilaUpdateArgs>(args: SelectSubset<T, NaročilaUpdateArgs<ExtArgs>>): Prisma__NaročilaClient<$Result.GetResult<Prisma.$NaročilaPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Naročilas.
     * @param {NaročilaDeleteManyArgs} args - Arguments to filter Naročilas to delete.
     * @example
     * // Delete a few Naročilas
     * const { count } = await prisma.naročila.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NaročilaDeleteManyArgs>(args?: SelectSubset<T, NaročilaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Naročilas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NaročilaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Naročilas
     * const naročila = await prisma.naročila.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NaročilaUpdateManyArgs>(args: SelectSubset<T, NaročilaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Naročilas and returns the data updated in the database.
     * @param {NaročilaUpdateManyAndReturnArgs} args - Arguments to update many Naročilas.
     * @example
     * // Update many Naročilas
     * const naročila = await prisma.naročila.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Naročilas and only return the `naročiloId`
     * const naročilaWithNaročiloIdOnly = await prisma.naročila.updateManyAndReturn({
     *   select: { naročiloId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NaročilaUpdateManyAndReturnArgs>(args: SelectSubset<T, NaročilaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NaročilaPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Naročila.
     * @param {NaročilaUpsertArgs} args - Arguments to update or create a Naročila.
     * @example
     * // Update or create a Naročila
     * const naročila = await prisma.naročila.upsert({
     *   create: {
     *     // ... data to create a Naročila
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Naročila we want to update
     *   }
     * })
     */
    upsert<T extends NaročilaUpsertArgs>(args: SelectSubset<T, NaročilaUpsertArgs<ExtArgs>>): Prisma__NaročilaClient<$Result.GetResult<Prisma.$NaročilaPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Naročilas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NaročilaCountArgs} args - Arguments to filter Naročilas to count.
     * @example
     * // Count the number of Naročilas
     * const count = await prisma.naročila.count({
     *   where: {
     *     // ... the filter for the Naročilas we want to count
     *   }
     * })
    **/
    count<T extends NaročilaCountArgs>(
      args?: Subset<T, NaročilaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NaročilaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Naročila.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NaročilaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NaročilaAggregateArgs>(args: Subset<T, NaročilaAggregateArgs>): Prisma.PrismaPromise<GetNaročilaAggregateType<T>>

    /**
     * Group by Naročila.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NaročilaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NaročilaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NaročilaGroupByArgs['orderBy'] }
        : { orderBy?: NaročilaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NaročilaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNaročilaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Naročila model
   */
  readonly fields: NaročilaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Naročila.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NaročilaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    termin<T extends TerminDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TerminDefaultArgs<ExtArgs>>): Prisma__TerminClient<$Result.GetResult<Prisma.$TerminPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Naročila model
   */ 
  interface NaročilaFieldRefs {
    readonly naročiloId: FieldRef<"Naročila", 'Int'>
    readonly ime: FieldRef<"Naročila", 'String'>
    readonly email: FieldRef<"Naročila", 'String'>
    readonly telefon: FieldRef<"Naročila", 'String'>
    readonly storitve: FieldRef<"Naročila", 'String[]'>
    readonly cena: FieldRef<"Naročila", 'Int'>
    readonly terminId: FieldRef<"Naročila", 'Int'>
    readonly createdAt: FieldRef<"Naročila", 'DateTime'>
    readonly updatedAt: FieldRef<"Naročila", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Naročila findUnique
   */
  export type NaročilaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Naročila
     */
    select?: NaročilaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Naročila
     */
    omit?: NaročilaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NaročilaInclude<ExtArgs> | null
    /**
     * Filter, which Naročila to fetch.
     */
    where: NaročilaWhereUniqueInput
  }

  /**
   * Naročila findUniqueOrThrow
   */
  export type NaročilaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Naročila
     */
    select?: NaročilaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Naročila
     */
    omit?: NaročilaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NaročilaInclude<ExtArgs> | null
    /**
     * Filter, which Naročila to fetch.
     */
    where: NaročilaWhereUniqueInput
  }

  /**
   * Naročila findFirst
   */
  export type NaročilaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Naročila
     */
    select?: NaročilaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Naročila
     */
    omit?: NaročilaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NaročilaInclude<ExtArgs> | null
    /**
     * Filter, which Naročila to fetch.
     */
    where?: NaročilaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Naročilas to fetch.
     */
    orderBy?: NaročilaOrderByWithRelationInput | NaročilaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Naročilas.
     */
    cursor?: NaročilaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Naročilas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Naročilas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Naročilas.
     */
    distinct?: NaročilaScalarFieldEnum | NaročilaScalarFieldEnum[]
  }

  /**
   * Naročila findFirstOrThrow
   */
  export type NaročilaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Naročila
     */
    select?: NaročilaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Naročila
     */
    omit?: NaročilaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NaročilaInclude<ExtArgs> | null
    /**
     * Filter, which Naročila to fetch.
     */
    where?: NaročilaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Naročilas to fetch.
     */
    orderBy?: NaročilaOrderByWithRelationInput | NaročilaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Naročilas.
     */
    cursor?: NaročilaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Naročilas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Naročilas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Naročilas.
     */
    distinct?: NaročilaScalarFieldEnum | NaročilaScalarFieldEnum[]
  }

  /**
   * Naročila findMany
   */
  export type NaročilaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Naročila
     */
    select?: NaročilaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Naročila
     */
    omit?: NaročilaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NaročilaInclude<ExtArgs> | null
    /**
     * Filter, which Naročilas to fetch.
     */
    where?: NaročilaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Naročilas to fetch.
     */
    orderBy?: NaročilaOrderByWithRelationInput | NaročilaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Naročilas.
     */
    cursor?: NaročilaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Naročilas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Naročilas.
     */
    skip?: number
    distinct?: NaročilaScalarFieldEnum | NaročilaScalarFieldEnum[]
  }

  /**
   * Naročila create
   */
  export type NaročilaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Naročila
     */
    select?: NaročilaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Naročila
     */
    omit?: NaročilaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NaročilaInclude<ExtArgs> | null
    /**
     * The data needed to create a Naročila.
     */
    data: XOR<NaročilaCreateInput, NaročilaUncheckedCreateInput>
  }

  /**
   * Naročila createMany
   */
  export type NaročilaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Naročilas.
     */
    data: NaročilaCreateManyInput | NaročilaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Naročila createManyAndReturn
   */
  export type NaročilaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Naročila
     */
    select?: NaročilaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Naročila
     */
    omit?: NaročilaOmit<ExtArgs> | null
    /**
     * The data used to create many Naročilas.
     */
    data: NaročilaCreateManyInput | NaročilaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NaročilaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Naročila update
   */
  export type NaročilaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Naročila
     */
    select?: NaročilaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Naročila
     */
    omit?: NaročilaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NaročilaInclude<ExtArgs> | null
    /**
     * The data needed to update a Naročila.
     */
    data: XOR<NaročilaUpdateInput, NaročilaUncheckedUpdateInput>
    /**
     * Choose, which Naročila to update.
     */
    where: NaročilaWhereUniqueInput
  }

  /**
   * Naročila updateMany
   */
  export type NaročilaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Naročilas.
     */
    data: XOR<NaročilaUpdateManyMutationInput, NaročilaUncheckedUpdateManyInput>
    /**
     * Filter which Naročilas to update
     */
    where?: NaročilaWhereInput
    /**
     * Limit how many Naročilas to update.
     */
    limit?: number
  }

  /**
   * Naročila updateManyAndReturn
   */
  export type NaročilaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Naročila
     */
    select?: NaročilaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Naročila
     */
    omit?: NaročilaOmit<ExtArgs> | null
    /**
     * The data used to update Naročilas.
     */
    data: XOR<NaročilaUpdateManyMutationInput, NaročilaUncheckedUpdateManyInput>
    /**
     * Filter which Naročilas to update
     */
    where?: NaročilaWhereInput
    /**
     * Limit how many Naročilas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NaročilaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Naročila upsert
   */
  export type NaročilaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Naročila
     */
    select?: NaročilaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Naročila
     */
    omit?: NaročilaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NaročilaInclude<ExtArgs> | null
    /**
     * The filter to search for the Naročila to update in case it exists.
     */
    where: NaročilaWhereUniqueInput
    /**
     * In case the Naročila found by the `where` argument doesn't exist, create a new Naročila with this data.
     */
    create: XOR<NaročilaCreateInput, NaročilaUncheckedCreateInput>
    /**
     * In case the Naročila was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NaročilaUpdateInput, NaročilaUncheckedUpdateInput>
  }

  /**
   * Naročila delete
   */
  export type NaročilaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Naročila
     */
    select?: NaročilaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Naročila
     */
    omit?: NaročilaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NaročilaInclude<ExtArgs> | null
    /**
     * Filter which Naročila to delete.
     */
    where: NaročilaWhereUniqueInput
  }

  /**
   * Naročila deleteMany
   */
  export type NaročilaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Naročilas to delete
     */
    where?: NaročilaWhereInput
    /**
     * Limit how many Naročilas to delete.
     */
    limit?: number
  }

  /**
   * Naročila without action
   */
  export type NaročilaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Naročila
     */
    select?: NaročilaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Naročila
     */
    omit?: NaročilaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NaročilaInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AdminScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const TerminScalarFieldEnum: {
    terminId: 'terminId',
    date: 'date',
    startTime: 'startTime',
    endTime: 'endTime',
    naVoljo: 'naVoljo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TerminScalarFieldEnum = (typeof TerminScalarFieldEnum)[keyof typeof TerminScalarFieldEnum]


  export const NaročilaScalarFieldEnum: {
    naročiloId: 'naročiloId',
    ime: 'ime',
    email: 'email',
    telefon: 'telefon',
    storitve: 'storitve',
    cena: 'cena',
    terminId: 'terminId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NaročilaScalarFieldEnum = (typeof NaročilaScalarFieldEnum)[keyof typeof NaročilaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: IntFilter<"Admin"> | number
    username?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    username?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
  }, "id">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _avg?: AdminAvgOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
    _sum?: AdminSumOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Admin"> | number
    username?: StringWithAggregatesFilter<"Admin"> | string
    password?: StringWithAggregatesFilter<"Admin"> | string
  }

  export type TerminWhereInput = {
    AND?: TerminWhereInput | TerminWhereInput[]
    OR?: TerminWhereInput[]
    NOT?: TerminWhereInput | TerminWhereInput[]
    terminId?: IntFilter<"Termin"> | number
    date?: DateTimeFilter<"Termin"> | Date | string
    startTime?: StringFilter<"Termin"> | string
    endTime?: StringFilter<"Termin"> | string
    naVoljo?: BoolFilter<"Termin"> | boolean
    createdAt?: DateTimeFilter<"Termin"> | Date | string
    updatedAt?: DateTimeFilter<"Termin"> | Date | string
    Naročila?: NaročilaListRelationFilter
  }

  export type TerminOrderByWithRelationInput = {
    terminId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    naVoljo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Naročila?: NaročilaOrderByRelationAggregateInput
  }

  export type TerminWhereUniqueInput = Prisma.AtLeast<{
    terminId?: number
    AND?: TerminWhereInput | TerminWhereInput[]
    OR?: TerminWhereInput[]
    NOT?: TerminWhereInput | TerminWhereInput[]
    date?: DateTimeFilter<"Termin"> | Date | string
    startTime?: StringFilter<"Termin"> | string
    endTime?: StringFilter<"Termin"> | string
    naVoljo?: BoolFilter<"Termin"> | boolean
    createdAt?: DateTimeFilter<"Termin"> | Date | string
    updatedAt?: DateTimeFilter<"Termin"> | Date | string
    Naročila?: NaročilaListRelationFilter
  }, "terminId">

  export type TerminOrderByWithAggregationInput = {
    terminId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    naVoljo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TerminCountOrderByAggregateInput
    _avg?: TerminAvgOrderByAggregateInput
    _max?: TerminMaxOrderByAggregateInput
    _min?: TerminMinOrderByAggregateInput
    _sum?: TerminSumOrderByAggregateInput
  }

  export type TerminScalarWhereWithAggregatesInput = {
    AND?: TerminScalarWhereWithAggregatesInput | TerminScalarWhereWithAggregatesInput[]
    OR?: TerminScalarWhereWithAggregatesInput[]
    NOT?: TerminScalarWhereWithAggregatesInput | TerminScalarWhereWithAggregatesInput[]
    terminId?: IntWithAggregatesFilter<"Termin"> | number
    date?: DateTimeWithAggregatesFilter<"Termin"> | Date | string
    startTime?: StringWithAggregatesFilter<"Termin"> | string
    endTime?: StringWithAggregatesFilter<"Termin"> | string
    naVoljo?: BoolWithAggregatesFilter<"Termin"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Termin"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Termin"> | Date | string
  }

  export type NaročilaWhereInput = {
    AND?: NaročilaWhereInput | NaročilaWhereInput[]
    OR?: NaročilaWhereInput[]
    NOT?: NaročilaWhereInput | NaročilaWhereInput[]
    naročiloId?: IntFilter<"Naročila"> | number
    ime?: StringFilter<"Naročila"> | string
    email?: StringFilter<"Naročila"> | string
    telefon?: StringFilter<"Naročila"> | string
    storitve?: StringNullableListFilter<"Naročila">
    cena?: IntFilter<"Naročila"> | number
    terminId?: IntFilter<"Naročila"> | number
    createdAt?: DateTimeFilter<"Naročila"> | Date | string
    updatedAt?: DateTimeFilter<"Naročila"> | Date | string
    termin?: XOR<TerminScalarRelationFilter, TerminWhereInput>
  }

  export type NaročilaOrderByWithRelationInput = {
    naročiloId?: SortOrder
    ime?: SortOrder
    email?: SortOrder
    telefon?: SortOrder
    storitve?: SortOrder
    cena?: SortOrder
    terminId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    termin?: TerminOrderByWithRelationInput
  }

  export type NaročilaWhereUniqueInput = Prisma.AtLeast<{
    naročiloId?: number
    AND?: NaročilaWhereInput | NaročilaWhereInput[]
    OR?: NaročilaWhereInput[]
    NOT?: NaročilaWhereInput | NaročilaWhereInput[]
    ime?: StringFilter<"Naročila"> | string
    email?: StringFilter<"Naročila"> | string
    telefon?: StringFilter<"Naročila"> | string
    storitve?: StringNullableListFilter<"Naročila">
    cena?: IntFilter<"Naročila"> | number
    terminId?: IntFilter<"Naročila"> | number
    createdAt?: DateTimeFilter<"Naročila"> | Date | string
    updatedAt?: DateTimeFilter<"Naročila"> | Date | string
    termin?: XOR<TerminScalarRelationFilter, TerminWhereInput>
  }, "naročiloId">

  export type NaročilaOrderByWithAggregationInput = {
    naročiloId?: SortOrder
    ime?: SortOrder
    email?: SortOrder
    telefon?: SortOrder
    storitve?: SortOrder
    cena?: SortOrder
    terminId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NaročilaCountOrderByAggregateInput
    _avg?: NaročilaAvgOrderByAggregateInput
    _max?: NaročilaMaxOrderByAggregateInput
    _min?: NaročilaMinOrderByAggregateInput
    _sum?: NaročilaSumOrderByAggregateInput
  }

  export type NaročilaScalarWhereWithAggregatesInput = {
    AND?: NaročilaScalarWhereWithAggregatesInput | NaročilaScalarWhereWithAggregatesInput[]
    OR?: NaročilaScalarWhereWithAggregatesInput[]
    NOT?: NaročilaScalarWhereWithAggregatesInput | NaročilaScalarWhereWithAggregatesInput[]
    naročiloId?: IntWithAggregatesFilter<"Naročila"> | number
    ime?: StringWithAggregatesFilter<"Naročila"> | string
    email?: StringWithAggregatesFilter<"Naročila"> | string
    telefon?: StringWithAggregatesFilter<"Naročila"> | string
    storitve?: StringNullableListFilter<"Naročila">
    cena?: IntWithAggregatesFilter<"Naročila"> | number
    terminId?: IntWithAggregatesFilter<"Naročila"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Naročila"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Naročila"> | Date | string
  }

  export type AdminCreateInput = {
    username: string
    password: string
  }

  export type AdminUncheckedCreateInput = {
    id?: number
    username: string
    password: string
  }

  export type AdminUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdminCreateManyInput = {
    id?: number
    username: string
    password: string
  }

  export type AdminUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type TerminCreateInput = {
    date: Date | string
    startTime: string
    endTime: string
    naVoljo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Naročila?: NaročilaCreateNestedManyWithoutTerminInput
  }

  export type TerminUncheckedCreateInput = {
    terminId?: number
    date: Date | string
    startTime: string
    endTime: string
    naVoljo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Naročila?: NaročilaUncheckedCreateNestedManyWithoutTerminInput
  }

  export type TerminUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    naVoljo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Naročila?: NaročilaUpdateManyWithoutTerminNestedInput
  }

  export type TerminUncheckedUpdateInput = {
    terminId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    naVoljo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Naročila?: NaročilaUncheckedUpdateManyWithoutTerminNestedInput
  }

  export type TerminCreateManyInput = {
    terminId?: number
    date: Date | string
    startTime: string
    endTime: string
    naVoljo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TerminUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    naVoljo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TerminUncheckedUpdateManyInput = {
    terminId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    naVoljo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NaročilaCreateInput = {
    ime: string
    email: string
    telefon: string
    storitve?: NaročilaCreatestoritveInput | string[]
    cena: number
    createdAt?: Date | string
    updatedAt?: Date | string
    termin: TerminCreateNestedOneWithoutNaročilaInput
  }

  export type NaročilaUncheckedCreateInput = {
    naročiloId?: number
    ime: string
    email: string
    telefon: string
    storitve?: NaročilaCreatestoritveInput | string[]
    cena: number
    terminId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NaročilaUpdateInput = {
    ime?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefon?: StringFieldUpdateOperationsInput | string
    storitve?: NaročilaUpdatestoritveInput | string[]
    cena?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    termin?: TerminUpdateOneRequiredWithoutNaročilaNestedInput
  }

  export type NaročilaUncheckedUpdateInput = {
    naročiloId?: IntFieldUpdateOperationsInput | number
    ime?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefon?: StringFieldUpdateOperationsInput | string
    storitve?: NaročilaUpdatestoritveInput | string[]
    cena?: IntFieldUpdateOperationsInput | number
    terminId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NaročilaCreateManyInput = {
    naročiloId?: number
    ime: string
    email: string
    telefon: string
    storitve?: NaročilaCreatestoritveInput | string[]
    cena: number
    terminId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NaročilaUpdateManyMutationInput = {
    ime?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefon?: StringFieldUpdateOperationsInput | string
    storitve?: NaročilaUpdatestoritveInput | string[]
    cena?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NaročilaUncheckedUpdateManyInput = {
    naročiloId?: IntFieldUpdateOperationsInput | number
    ime?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefon?: StringFieldUpdateOperationsInput | string
    storitve?: NaročilaUpdatestoritveInput | string[]
    cena?: IntFieldUpdateOperationsInput | number
    terminId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type AdminAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type AdminSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NaročilaListRelationFilter = {
    every?: NaročilaWhereInput
    some?: NaročilaWhereInput
    none?: NaročilaWhereInput
  }

  export type NaročilaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TerminCountOrderByAggregateInput = {
    terminId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    naVoljo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TerminAvgOrderByAggregateInput = {
    terminId?: SortOrder
  }

  export type TerminMaxOrderByAggregateInput = {
    terminId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    naVoljo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TerminMinOrderByAggregateInput = {
    terminId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    naVoljo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TerminSumOrderByAggregateInput = {
    terminId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type TerminScalarRelationFilter = {
    is?: TerminWhereInput
    isNot?: TerminWhereInput
  }

  export type NaročilaCountOrderByAggregateInput = {
    naročiloId?: SortOrder
    ime?: SortOrder
    email?: SortOrder
    telefon?: SortOrder
    storitve?: SortOrder
    cena?: SortOrder
    terminId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NaročilaAvgOrderByAggregateInput = {
    naročiloId?: SortOrder
    cena?: SortOrder
    terminId?: SortOrder
  }

  export type NaročilaMaxOrderByAggregateInput = {
    naročiloId?: SortOrder
    ime?: SortOrder
    email?: SortOrder
    telefon?: SortOrder
    cena?: SortOrder
    terminId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NaročilaMinOrderByAggregateInput = {
    naročiloId?: SortOrder
    ime?: SortOrder
    email?: SortOrder
    telefon?: SortOrder
    cena?: SortOrder
    terminId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NaročilaSumOrderByAggregateInput = {
    naročiloId?: SortOrder
    cena?: SortOrder
    terminId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NaročilaCreateNestedManyWithoutTerminInput = {
    create?: XOR<NaročilaCreateWithoutTerminInput, NaročilaUncheckedCreateWithoutTerminInput> | NaročilaCreateWithoutTerminInput[] | NaročilaUncheckedCreateWithoutTerminInput[]
    connectOrCreate?: NaročilaCreateOrConnectWithoutTerminInput | NaročilaCreateOrConnectWithoutTerminInput[]
    createMany?: NaročilaCreateManyTerminInputEnvelope
    connect?: NaročilaWhereUniqueInput | NaročilaWhereUniqueInput[]
  }

  export type NaročilaUncheckedCreateNestedManyWithoutTerminInput = {
    create?: XOR<NaročilaCreateWithoutTerminInput, NaročilaUncheckedCreateWithoutTerminInput> | NaročilaCreateWithoutTerminInput[] | NaročilaUncheckedCreateWithoutTerminInput[]
    connectOrCreate?: NaročilaCreateOrConnectWithoutTerminInput | NaročilaCreateOrConnectWithoutTerminInput[]
    createMany?: NaročilaCreateManyTerminInputEnvelope
    connect?: NaročilaWhereUniqueInput | NaročilaWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NaročilaUpdateManyWithoutTerminNestedInput = {
    create?: XOR<NaročilaCreateWithoutTerminInput, NaročilaUncheckedCreateWithoutTerminInput> | NaročilaCreateWithoutTerminInput[] | NaročilaUncheckedCreateWithoutTerminInput[]
    connectOrCreate?: NaročilaCreateOrConnectWithoutTerminInput | NaročilaCreateOrConnectWithoutTerminInput[]
    upsert?: NaročilaUpsertWithWhereUniqueWithoutTerminInput | NaročilaUpsertWithWhereUniqueWithoutTerminInput[]
    createMany?: NaročilaCreateManyTerminInputEnvelope
    set?: NaročilaWhereUniqueInput | NaročilaWhereUniqueInput[]
    disconnect?: NaročilaWhereUniqueInput | NaročilaWhereUniqueInput[]
    delete?: NaročilaWhereUniqueInput | NaročilaWhereUniqueInput[]
    connect?: NaročilaWhereUniqueInput | NaročilaWhereUniqueInput[]
    update?: NaročilaUpdateWithWhereUniqueWithoutTerminInput | NaročilaUpdateWithWhereUniqueWithoutTerminInput[]
    updateMany?: NaročilaUpdateManyWithWhereWithoutTerminInput | NaročilaUpdateManyWithWhereWithoutTerminInput[]
    deleteMany?: NaročilaScalarWhereInput | NaročilaScalarWhereInput[]
  }

  export type NaročilaUncheckedUpdateManyWithoutTerminNestedInput = {
    create?: XOR<NaročilaCreateWithoutTerminInput, NaročilaUncheckedCreateWithoutTerminInput> | NaročilaCreateWithoutTerminInput[] | NaročilaUncheckedCreateWithoutTerminInput[]
    connectOrCreate?: NaročilaCreateOrConnectWithoutTerminInput | NaročilaCreateOrConnectWithoutTerminInput[]
    upsert?: NaročilaUpsertWithWhereUniqueWithoutTerminInput | NaročilaUpsertWithWhereUniqueWithoutTerminInput[]
    createMany?: NaročilaCreateManyTerminInputEnvelope
    set?: NaročilaWhereUniqueInput | NaročilaWhereUniqueInput[]
    disconnect?: NaročilaWhereUniqueInput | NaročilaWhereUniqueInput[]
    delete?: NaročilaWhereUniqueInput | NaročilaWhereUniqueInput[]
    connect?: NaročilaWhereUniqueInput | NaročilaWhereUniqueInput[]
    update?: NaročilaUpdateWithWhereUniqueWithoutTerminInput | NaročilaUpdateWithWhereUniqueWithoutTerminInput[]
    updateMany?: NaročilaUpdateManyWithWhereWithoutTerminInput | NaročilaUpdateManyWithWhereWithoutTerminInput[]
    deleteMany?: NaročilaScalarWhereInput | NaročilaScalarWhereInput[]
  }

  export type NaročilaCreatestoritveInput = {
    set: string[]
  }

  export type TerminCreateNestedOneWithoutNaročilaInput = {
    create?: XOR<TerminCreateWithoutNaročilaInput, TerminUncheckedCreateWithoutNaročilaInput>
    connectOrCreate?: TerminCreateOrConnectWithoutNaročilaInput
    connect?: TerminWhereUniqueInput
  }

  export type NaročilaUpdatestoritveInput = {
    set?: string[]
    push?: string | string[]
  }

  export type TerminUpdateOneRequiredWithoutNaročilaNestedInput = {
    create?: XOR<TerminCreateWithoutNaročilaInput, TerminUncheckedCreateWithoutNaročilaInput>
    connectOrCreate?: TerminCreateOrConnectWithoutNaročilaInput
    upsert?: TerminUpsertWithoutNaročilaInput
    connect?: TerminWhereUniqueInput
    update?: XOR<XOR<TerminUpdateToOneWithWhereWithoutNaročilaInput, TerminUpdateWithoutNaročilaInput>, TerminUncheckedUpdateWithoutNaročilaInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NaročilaCreateWithoutTerminInput = {
    ime: string
    email: string
    telefon: string
    storitve?: NaročilaCreatestoritveInput | string[]
    cena: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NaročilaUncheckedCreateWithoutTerminInput = {
    naročiloId?: number
    ime: string
    email: string
    telefon: string
    storitve?: NaročilaCreatestoritveInput | string[]
    cena: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NaročilaCreateOrConnectWithoutTerminInput = {
    where: NaročilaWhereUniqueInput
    create: XOR<NaročilaCreateWithoutTerminInput, NaročilaUncheckedCreateWithoutTerminInput>
  }

  export type NaročilaCreateManyTerminInputEnvelope = {
    data: NaročilaCreateManyTerminInput | NaročilaCreateManyTerminInput[]
    skipDuplicates?: boolean
  }

  export type NaročilaUpsertWithWhereUniqueWithoutTerminInput = {
    where: NaročilaWhereUniqueInput
    update: XOR<NaročilaUpdateWithoutTerminInput, NaročilaUncheckedUpdateWithoutTerminInput>
    create: XOR<NaročilaCreateWithoutTerminInput, NaročilaUncheckedCreateWithoutTerminInput>
  }

  export type NaročilaUpdateWithWhereUniqueWithoutTerminInput = {
    where: NaročilaWhereUniqueInput
    data: XOR<NaročilaUpdateWithoutTerminInput, NaročilaUncheckedUpdateWithoutTerminInput>
  }

  export type NaročilaUpdateManyWithWhereWithoutTerminInput = {
    where: NaročilaScalarWhereInput
    data: XOR<NaročilaUpdateManyMutationInput, NaročilaUncheckedUpdateManyWithoutTerminInput>
  }

  export type NaročilaScalarWhereInput = {
    AND?: NaročilaScalarWhereInput | NaročilaScalarWhereInput[]
    OR?: NaročilaScalarWhereInput[]
    NOT?: NaročilaScalarWhereInput | NaročilaScalarWhereInput[]
    naročiloId?: IntFilter<"Naročila"> | number
    ime?: StringFilter<"Naročila"> | string
    email?: StringFilter<"Naročila"> | string
    telefon?: StringFilter<"Naročila"> | string
    storitve?: StringNullableListFilter<"Naročila">
    cena?: IntFilter<"Naročila"> | number
    terminId?: IntFilter<"Naročila"> | number
    createdAt?: DateTimeFilter<"Naročila"> | Date | string
    updatedAt?: DateTimeFilter<"Naročila"> | Date | string
  }

  export type TerminCreateWithoutNaročilaInput = {
    date: Date | string
    startTime: string
    endTime: string
    naVoljo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TerminUncheckedCreateWithoutNaročilaInput = {
    terminId?: number
    date: Date | string
    startTime: string
    endTime: string
    naVoljo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TerminCreateOrConnectWithoutNaročilaInput = {
    where: TerminWhereUniqueInput
    create: XOR<TerminCreateWithoutNaročilaInput, TerminUncheckedCreateWithoutNaročilaInput>
  }

  export type TerminUpsertWithoutNaročilaInput = {
    update: XOR<TerminUpdateWithoutNaročilaInput, TerminUncheckedUpdateWithoutNaročilaInput>
    create: XOR<TerminCreateWithoutNaročilaInput, TerminUncheckedCreateWithoutNaročilaInput>
    where?: TerminWhereInput
  }

  export type TerminUpdateToOneWithWhereWithoutNaročilaInput = {
    where?: TerminWhereInput
    data: XOR<TerminUpdateWithoutNaročilaInput, TerminUncheckedUpdateWithoutNaročilaInput>
  }

  export type TerminUpdateWithoutNaročilaInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    naVoljo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TerminUncheckedUpdateWithoutNaročilaInput = {
    terminId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    naVoljo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NaročilaCreateManyTerminInput = {
    naročiloId?: number
    ime: string
    email: string
    telefon: string
    storitve?: NaročilaCreatestoritveInput | string[]
    cena: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NaročilaUpdateWithoutTerminInput = {
    ime?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefon?: StringFieldUpdateOperationsInput | string
    storitve?: NaročilaUpdatestoritveInput | string[]
    cena?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NaročilaUncheckedUpdateWithoutTerminInput = {
    naročiloId?: IntFieldUpdateOperationsInput | number
    ime?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefon?: StringFieldUpdateOperationsInput | string
    storitve?: NaročilaUpdatestoritveInput | string[]
    cena?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NaročilaUncheckedUpdateManyWithoutTerminInput = {
    naročiloId?: IntFieldUpdateOperationsInput | number
    ime?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefon?: StringFieldUpdateOperationsInput | string
    storitve?: NaročilaUpdatestoritveInput | string[]
    cena?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}